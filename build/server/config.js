"use strict";Object.defineProperty(exports,"__esModule",{value:true});var nike_hercules_1=require("@implydata/nike-hercules");var fs=require("fs");var nopt=require("nopt");var path=require("path");var models_1=require("../common/models");var general_1=require("../common/utils/general/general");var models_2=require("./models");var utils_1=require("./utils");var yaml_helper_1=require("./utils/yaml-helper/yaml-helper");var AUTH_MODULE_VERSION=1;var PACKAGE_FILE=path.join(__dirname,"../../package.json");function exitWithMessage(e){console.log(e);try{utils_1.loadFileSync(PACKAGE_FILE,"json")}catch(e){}process.exit()}function exitWithError(e){console.error(e);process.exit(1)}function zeroOne(e){return Number(Boolean(e))}function appSettingsJSHasOnLoad(e){if(e.sourceReintrospectOnLoad||e.sourceListRefreshOnLoad)return true;if(Array.isArray(e.clusters)){return e.clusters.some(function(e){return e.sourceReintrospectOnLoad||e.sourceListRefreshOnLoad})}return false}var packageObj=null;try{packageObj=utils_1.loadFileSync(PACKAGE_FILE,"json")}catch(e){exitWithError("Could not read package.json: "+e.message)}exports.VERSION=packageObj.version;var USAGE="\nUsage: pivot [options]\n\nPossible usage:\n\n  pivot --examples\n  pivot --druid your.broker.host:8082\n\nGeneral arguments:\n\n      --help                   Print this help message\n      --version                Display the version number\n  -v, --verbose                Display the DB queries that are being made\n\nServer arguments:\n\n  -p, --port <port-number>     The port pivot will run on (default: "+models_2.ServerSettings.DEFAULT_PORT+")\n      --server-host <host>     The host on which to listen on (default: all hosts)\n      --server-root <root>     A custom server root to listen on (default "+models_2.ServerSettings.DEFAULT_SERVER_ROOT+")\n      --settings-location <settings-file> Where to store and load settings (as a JSON file)\n\nData connection options:\n\n  Exactly one data connection option must be provided.\n\n  -c, --config <path>          Use this local configuration (YAML) file\n      --examples               Start Pivot with some example data for testing / demo\n  -f, --file <path>            Start Pivot on top of this file based data cube (must be JSON, CSV, or TSV)\n  -d, --druid <host>           The Druid broker node to connect to\n      --postgres <host>        The Postgres cluster to connect to\n      --mysql <host>           The MySQL cluster to connect to\n\n      --user <string>          The cluster 'user' (if needed)\n      --password <string>      The cluster 'password' (if needed)\n      --database <string>      The cluster 'database' (if needed)\n\n      --socks-host <string>    Use this socks host to facilitate a Druid connection\n      --socks-username <string>   the username for the socks proxy\n      --socks-password <string>   the password for the socks proxy\n\nConfiguration printing utilities:\n\n      --print-config           Prints out the auto generated config\n      --with-comments          Adds comments when printing the auto generated config\n";function parseArgs(){return nopt({help:Boolean,version:Boolean,verbose:Boolean,port:Number,"server-host":String,"server-root":String,"settings-location":String,examples:Boolean,example:String,config:String,auth:String,"print-config":Boolean,"with-comments":Boolean,file:String,druid:String,postgres:String,mysql:String,user:String,password:String,database:String,"socks-host":String,"socks-username":String,"socks-password":String,"user-mode":String,license:String},{v:["--verbose"],p:["--port"],c:["--config"],f:["--file"],d:["--druid"],u:["--user-mode"],l:["--license"]},process.argv)}var parsedArgs=parseArgs();if(parsedArgs["help"]){exitWithMessage(USAGE)}if(parsedArgs["version"]){exitWithMessage(exports.VERSION)}if(parsedArgs["example"]){delete parsedArgs["example"];parsedArgs["examples"]=true}var SETTINGS_INPUTS=["config","settings-location","examples","file","druid","postgres","mysql"];var numSettingsInputs=general_1.arraySum(SETTINGS_INPUTS.map(function(e){return zeroOne(parsedArgs[e])}));if(numSettingsInputs===0){parsedArgs["settings-location"]="./pivot-settings.json"}if(numSettingsInputs>1){console.error("only one of --"+SETTINGS_INPUTS.join(", --")+" can be given on the command line");if(parsedArgs["druid"]&&parsedArgs["config"]){console.error("Looks like you are using --config and --druid in conjunction with each other");console.error("This usage is no longer supported. If you are migrating from Pivot < 0.9.x");console.error("Please visit: (http://pivot.imply.io/pivot-0.9.x-migration)")}process.exit(1)}exports.PRINT_CONFIG=Boolean(parsedArgs["print-config"]);exports.START_SERVER=!exports.PRINT_CONFIG;if(exports.START_SERVER)nike_hercules_1.LOGGER.init();var serverSettingsFilePath=parsedArgs["config"];if(parsedArgs["examples"]){serverSettingsFilePath=path.join(__dirname,"../../config-examples.yaml")}var anchorPath;var serverSettingsJS;if(serverSettingsFilePath){anchorPath=path.dirname(serverSettingsFilePath);try{serverSettingsJS=general_1.inlineVars(utils_1.loadFileSync(serverSettingsFilePath,"yaml"),process.env);nike_hercules_1.LOGGER.log("Using config "+serverSettingsFilePath)}catch(e){exitWithError("Could not load config from '"+serverSettingsFilePath+"': "+e.message)}}else{anchorPath=process.cwd();serverSettingsJS={}}if(parsedArgs["port"]){serverSettingsJS.port=parsedArgs["port"]}if(parsedArgs["server-host"]){serverSettingsJS.serverHost=parsedArgs["server-host"]}if(parsedArgs["server-root"]){serverSettingsJS.serverRoot=parsedArgs["server-root"]}if(parsedArgs["auth"]){serverSettingsJS.auth=parsedArgs["auth"]}if(parsedArgs["cookie-max-age"]){serverSettingsJS.cookieMaxAge=parsedArgs["cookie-max-age"]}if(parsedArgs["sha-salt"]){serverSettingsJS.shaSalt=parsedArgs["sha-salt"]}if(parsedArgs["user-mode"]){serverSettingsJS.userMode=parsedArgs["user-mode"]}if(parsedArgs["settings-location"]){serverSettingsJS.settingsLocation={location:"file",format:"json-pretty",uri:parsedArgs["settings-location"]}}exports.VERBOSE=Boolean(parsedArgs["verbose"]||serverSettingsJS.verbose);var varDir=serverSettingsJS.varDir||path.resolve("var/pivot");try{fs.mkdirSync(varDir)}catch(e){if(e.code!=="EEXIST"){exitWithError("Could not find varDir "+varDir)}}try{var random=String(Math.random()).substring(2);var testFile=path.join(varDir,".pivot-test-file-"+random);fs.writeFileSync(testFile,random,{encoding:"utf-8"});if(fs.readFileSync(testFile,{encoding:"utf-8"})!==random)throw new Error("why?");fs.unlinkSync(testFile)}catch(e){exitWithError("Could not write to varDir "+varDir)}exports.LICENSE_MANAGER=new utils_1.LicenseManager({logger:nike_hercules_1.LOGGER,varDir:varDir,licenseFile:(parsedArgs["license"]?path.resolve(parsedArgs["license"]):null)||path.resolve(anchorPath,serverSettingsJS.licenseFile||"pivot-license")});if(serverSettingsJS.settingsLocation&&serverSettingsJS.settingsLocation.location==="file"&&!serverSettingsJS.settingsLocation.uri){serverSettingsJS.settingsLocation.uri=path.resolve(varDir,"pivot-settings.json")}exports.SERVER_SETTINGS=models_2.ServerSettings.fromJS(serverSettingsJS);exports.TOKEN_MANAGER=new utils_1.TokenManager(exports.SERVER_SETTINGS.getInviteStore(),{logger:nike_hercules_1.LOGGER});if(exports.START_SERVER){var trackingUrl=exports.SERVER_SETTINGS.getTrackingUrl();if(trackingUrl){nike_hercules_1.TRACKER.init(exports.VERSION,trackingUrl,exports.SERVER_SETTINGS.getTrackingContext())}}var auth=exports.SERVER_SETTINGS.auth;var authMiddleware=null;if(auth&&auth!=="none"){auth=path.resolve(anchorPath,auth);nike_hercules_1.LOGGER.log("Using auth "+auth);var authModule=void 0;try{authModule=require(auth)}catch(e){exitWithError("error loading auth module: "+e.message)}if(authModule.version!==AUTH_MODULE_VERSION){exitWithError("incorrect auth module version "+authModule.version+" needed "+AUTH_MODULE_VERSION)}if(typeof authModule.auth!=="function")exitWithError("Invalid auth module: must export 'auth' function");authMiddleware=authModule.auth({logger:nike_hercules_1.LOGGER,tracker:nike_hercules_1.TRACKER,verbose:exports.VERBOSE,version:exports.VERSION,serverSettings:exports.SERVER_SETTINGS})}exports.AUTH=authMiddleware;if(exports.START_SERVER){nike_hercules_1.LOGGER.log("Starting Pivot v"+exports.VERSION);nike_hercules_1.TRACKER.track({eventType:"pivot_init",metric:"init",value:1})}var CLUSTER_TYPES=["druid","postgres","mysql"];var settingsStore=null;if(serverSettingsFilePath||parsedArgs["settings"]){var settingsLocation=exports.SERVER_SETTINGS.getSettingsLocation();if(settingsLocation){switch(settingsLocation.getLocation()){case"file":var settingsFilePath=path.resolve(anchorPath,settingsLocation.uri);if(settingsLocation.getReadOnly()){settingsStore=utils_1.SettingsStore.fromReadOnlyFile(settingsFilePath,settingsLocation.getFormat())}else{settingsStore=utils_1.SettingsStore.fromWritableFile(settingsFilePath,settingsLocation.getFormat())}break;case"mysql":settingsStore=utils_1.SettingsStore.fromStateStore(new utils_1.MysqlStateStore(nike_hercules_1.LOGGER,settingsLocation));break;case"postgres":throw new Error("todo");default:exitWithError("unknown location '"+settingsLocation.location+"'")}}else{var appSettingsFromConfig=void 0;try{appSettingsFromConfig=models_1.AppSettings.fromJS(serverSettingsJS.settings||serverSettingsJS,{visualizations:models_1.MANIFESTS})}catch(e){exitWithError("Could not read setting from config file: "+e.message)}settingsStore=utils_1.SettingsStore.fromTransient(appSettingsFromConfig,appSettingsJSHasOnLoad(serverSettingsJS))}}else{var initAppSettings=models_1.AppSettings.BLANK;var fileToLoad=parsedArgs["file"];if(fileToLoad){var fileName=path.basename(fileToLoad,path.extname(fileToLoad));initAppSettings=initAppSettings.addOrUpdateDataCube(models_1.DataCube.fromJS({name:fileName,title:fileName,clusterName:"native",source:fileToLoad}))}for(var _i=0,CLUSTER_TYPES_1=CLUSTER_TYPES;_i<CLUSTER_TYPES_1.length;_i++){var clusterType=CLUSTER_TYPES_1[_i];var host=parsedArgs[clusterType];if(host){initAppSettings=initAppSettings.addOrUpdateCluster(models_1.Cluster.fromJS({name:clusterType,type:clusterType,host:host,user:parsedArgs["user"],password:parsedArgs["password"],database:parsedArgs["database"],socksHost:parsedArgs["socks-host"],socksUsername:parsedArgs["socks-username"],socksPassword:parsedArgs["socks-password"]}))}}settingsStore=utils_1.SettingsStore.fromTransient(initAppSettings)}exports.SETTINGS_MANAGER=new utils_1.SettingsManager(settingsStore,{logger:nike_hercules_1.LOGGER,verbose:exports.VERBOSE,anchorPath:anchorPath,initialLoadTimeout:exports.SERVER_SETTINGS.getPageMustLoadTimeout(),onInitialReadFail:function(e){nike_hercules_1.LOGGER.error("Failed initial settings load due to: "+e.message+" exiting.");process.exit(1)}});if(exports.PRINT_CONFIG){var withComments_1=Boolean(parsedArgs["with-comments"]);exports.SETTINGS_MANAGER.getFullSettings({timeout:1e4}).then(function(e){console.log(yaml_helper_1.appSettingsToYAML(e.appSettings,withComments_1,{header:true,version:exports.VERSION,verbose:exports.VERBOSE,port:exports.SERVER_SETTINGS.getPort()}))}).catch(function(e){exitWithError("There was an error generating a config: "+e.message)})}