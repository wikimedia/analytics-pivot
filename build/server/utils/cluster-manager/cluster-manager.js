"use strict";Object.defineProperty(exports,"__esModule",{value:true});var path=require("path");var plywood_1=require("plywood");var Q=require("q");var requester_1=require("../requester/requester");var CONNECTION_RETRY_TIMEOUT=2e4;var DRUID_REQUEST_DECORATOR_MODULE_VERSION=1;var ClusterManager=function(){function e(e,t){this.initialConnectionTimer=null;if(!e)throw new Error("must have cluster");this.logger=t.logger;this.verbose=Boolean(t.verbose);this.anchorPath=t.anchorPath;this.cluster=e;this.initialConnectionEstablished=false;this.version=e.version;this.updateRequestDecorator();this.updateRequester()}e.prototype.destroy=function(){if(this.initialConnectionTimer){clearTimeout(this.initialConnectionTimer);this.initialConnectionTimer=null}};e.prototype.updateRequestDecorator=function(){var e=this,t=e.cluster,r=e.logger,o=e.anchorPath;if(!t.requestDecorator)return;var s=path.resolve(o,t.requestDecorator);r.log("Loading requestDecorator from '"+s+"'");try{this.requestDecoratorModule=require(s)}catch(e){throw new Error("error loading druidRequestDecorator module from '"+s+"': "+e.message)}if(this.requestDecoratorModule.version!==DRUID_REQUEST_DECORATOR_MODULE_VERSION){throw new Error("druidRequestDecorator module '"+s+"' has incorrect version")}};e.prototype.updateRequester=function(){var e=this,t=e.cluster,r=e.logger,o=e.requestDecoratorModule;var s=null;if(t.type==="druid"&&o){r.log("Cluster '"+t.name+"' creating requestDecorator");s=o.druidRequestDecoratorFactory(r,{options:t.decoratorOptions,cluster:t})}this.requester=requester_1.properRequesterFactory({type:t.type,host:t.host,timeout:t.getTimeout(),verbose:this.verbose,concurrentLimit:5,druidRequestDecorator:s,socksHost:t.socksHost,socksUsername:t.socksUsername,socksPassword:t.socksPassword,database:t.database,user:t.user,password:t.password})};e.prototype.establishInitialConnection=function(e){var t=this;if(e===void 0){e=Infinity}var r=this,o=r.logger,s=r.verbose,i=r.cluster;var n=Q.defer();var a=-1;var u;var c=function(){a++;if(a===0){if(s)o.log("Attempting to connect to cluster '"+i.name+"'")}else{o.log("Re-attempting to connect to cluster '"+i.name+"' (retry "+a+")")}u=Date.now();plywood_1.External.getConstructorFor(i.type).getVersion(t.requester).then(function(e){t.onConnectionEstablished();t.internalizeVersion(e).then(function(){return n.resolve(t)})},function(r){var s=Date.now()-u;var l=Math.max(1,CONNECTION_RETRY_TIMEOUT-s);o.error("Failed to connect to cluster '"+i.name+"' because: "+r.message+" (will retry in "+l+"ms)");if(a<e){t.initialConnectionTimer=setTimeout(c,l)}else{n.reject(new Error("too many failed attempts"))}})};c();return n.promise};e.prototype.onConnectionEstablished=function(){var e=this,t=e.logger,r=e.cluster;t.log("Connected to cluster '"+r.name+"'");this.initialConnectionEstablished=true};e.prototype.internalizeVersion=function(e){if(this.version)return Q(null);var t=this,r=t.logger,o=t.cluster;r.log("Cluster '"+o.name+"' is running "+o.type+"@"+e);this.version=e;return Q(null)};e.prototype.getSources=function(){if(!this.initialConnectionEstablished)return Q([]);return Q(plywood_1.External.getConstructorFor(this.cluster.type).getSourceList(this.requester))};return e}();exports.ClusterManager=ClusterManager;